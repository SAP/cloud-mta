# Golang CircleCI 2.0 configs
version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.16
    environment:
      - DEP_VERSION: 0.5.1
    working_directory: /go/src/github.com/SAP/cloud-mta
    steps:
      - checkout
      - run: go version
      - run: go env
      - run: go mod vendor
      - run: go test -v -race ./...
      - run: sudo chown circleci:circleci /go/bin
      - run: make tools
      - run: make lint
      - run:
          name: cov install deps
          command: |
            go get golang.org/x/tools/cmd/cover
            go get github.com/mattn/goveralls
            go get github.com/modocache/gover
            go install -mod=mod github.com/mattn/goveralls
            go install -mod=mod github.com/modocache/gover
      - run: go test -v github.com/SAP/cloud-mta/mta -coverprofile=mta.coverprofile
      - run: go test -v github.com/SAP/cloud-mta/validations -coverprofile=validations.coverprofile
      - run: gover
      - run: goveralls -v -service=circle-ci -coverprofile=gover.coverprofile -repotoken $COVERALLS_TOKEN

  compliance:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/workdir
    steps:
      - checkout
      - run:
          name: compliance check
          command: |
            pip3 install --user reuse
            ~/.local/bin/reuse lint
      
  release:
    docker:
      - image: circleci/golang:1.16
    working_directory: /go/src/github.com/SAP/cloud-mta
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c3:2b:e9:bb:d5:05:32:ab:df:ce:2b:c3:e5:f7:95:42"
      - checkout
      - run:
          name: install dependencies
          command: |
            go mod vendor
      - run:
          name: bump version
          command: |
            #Make sure HEAD points to master
            git checkout master
            CURR_MTA_VERSION=$(cat ./VERSION)
            echo "Current release: ${CURR_MTA_VERSION}"
            MTA_VERSION=$(echo $CURR_MTA_VERSION | awk -F. -v MAJOR_VAR="$MAJOR" -v MINOR_VAR="$MINOR" -v PATCH_VAR="$PATCH" '{
              if (MAJOR_VAR == "true"){
                $1++
                $2=0
                $3=0
              } else if (MINOR_VAR == "true"){
                $2++
                $3=0
              } else if (PATCH_VAR == "true"){
                $3++
              } 
              printf "%d.%d.%d\n", $1, $2 ,$3 
            }')
            echo "New release: ${MTA_VERSION}"
            #Update new version in files
            sed  -i "/\"version\":/s/${CURR_MTA_VERSION}/${MTA_VERSION}/" ./package.json
            sed  -i "/cli_version:/s/${CURR_MTA_VERSION}/${MTA_VERSION}/" ./configs/version.yaml
            sed  -i "s/${CURR_MTA_VERSION}/${MTA_VERSION}/" ./VERSION
            #Generate version file
            go generate -run "go run ./tools/embed.go -source=./configs/version.yaml -target=./internal/version/version_cfg.go -name=VersionConfig -package=version"
            #Add all updated files to commit
            git add ./package.json ./configs/version.yaml ./VERSION ./internal/version/version_cfg.go
            git config user.email "${CLOUD_MTA_BOT_EMAIL}"
            git config user.name "${CLOUD_MTA_BOT_USER}"
            git commit --allow-empty -m "[skip ci] Bump version ${MTA_VERSION}"
            #Push commit directly to master
            git push -q https://github.com/SAP/cloud-mta.git master
            #Tag
            git tag -a v${MTA_VERSION} -m "New release ${MTA_VERSION}"
            git push https://github.com/SAP/cloud-mta.git v${MTA_VERSION}
            
      - run:
          name: release new version
          command: |
            #Make sure HEAD points to master
            git checkout master
            export GITHUB_TOKEN=${CLOUD_MTA_BOT_GITHUB_TOKEN}
            curl -sL https://git.io/goreleaser | bash  
            
  publish:
    docker:
      - image: circleci/node:13.1.0
    working_directory: ~/go/src/github.com/SAP/cloud-mta
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c3:2b:e9:bb:d5:05:32:ab:df:ce:2b:c3:e5:f7:95:42"
      - checkout
      - run:
          name: publish to npm
          command: |
            #Make sure HEAD points to master
            git checkout master
            git fetch
            git rebase
            echo "//registry.npmjs.org/:_authToken=$CLOUD_MTA_BOT_NPM_TOKEN" > .npmrc
            npm install
            npm publish
            #Publish the mta-local package
            node convertPackageJsonToMtaLocal.js
            npm publish
      - run:
          name: remove dummy release tag
          command: |
            git push https://github.com/SAP/cloud-mta.git --delete release

workflows:
  version: 2
  on_pr_build:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - compliance:
          filters:
            branches:
              ignore: master
              
  on_merge_build_test:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - compliance:
          filters:
            branches:
              ignore: master
              
  on_tag_build_test_deploy:
    jobs:
      - build:
          filters:  # required since `release` has tag filters AND requires `build`
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - release:
          requires:
            - build
          filters:  # job runs on tags for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - publish:
          requires:
            - release
          filters:  # job runs on tag 'release' for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
